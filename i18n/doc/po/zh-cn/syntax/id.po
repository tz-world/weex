msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"

#. type: Title #
#: /home/dev/download/weex/doc/syntax/id.md:1
#, no-wrap
msgid "Find an Element"
msgstr "找到一个元素 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/syntax/id.md:4
msgid ""
"In Weex, we may set the `id` property for a particular element, just as "
"unique identification of a particular element."
msgstr ""
"在weex，我们可以设置为一个特定的元素`id`财产，就像一个特定元素的唯一标"
"识。 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/syntax/id.md:6
msgid ""
"`id` can be used by `this.$(id)` to find an element with a certain id. Take `"
"$scrollTo()` For example:"
msgstr ""
" `id`` can be used by ``this.$(id)`` to find an element with a certain id. "
"Take ``$scrollTo()`例如： ???"

#. type: Plain text
#: /home/dev/download/weex/doc/syntax/id.md:28
#, no-wrap
msgid ""
"```\n"
"  <template>\n"
"    <container>\n"
"      <text id=\"top\">Top</text>\n"
"      <container style=\"height: 10000; background-color: #999999;\">\n"
"      </container>\n"
"      <text onclick=\"back2Top\">Back to Top</text>\n"
"    </container>\n"
"  </template>\n"
"  <script>\n"
"    module.exports = {\n"
"      methods: {\n"
"        back2Top: function () {\n"
"          var top = this.$('top')\n"
"          this.$scrollTo(top)   // both work\n"
"          this.$scrollTo('top') // both work\n"
"        }\n"
"      }\n"
"    }\n"
"    </script>\n"
"```\n"
msgstr ""

#. type: Plain text
#: /home/dev/download/weex/doc/syntax/id.md:30
msgid ""
"`id` can also work with `repeat` attribute [See more about display logical "
"control](./display-logic.md), and ensure repetitive elements with different "
"`id`:"
msgstr ""
" `id`` can also work with ``repeat`` attribute [See more about display "
"logical control](./display-logic.md), and ensure repetitive elements with "
"different ``id`： ???"

#. type: Plain text
#: /home/dev/download/weex/doc/syntax/id.md:55
#, no-wrap
msgid ""
"```\n"
"  <template>\n"
"    <container>\n"
"      <image id=\"{{imgId}}\" src=\"{{imgUrl}}\" onclick=\"getImageId\" repeat=\"{{images}}\"></image>\n"
"    </container>\n"
"  </template>\n"
"  <script>\n"
"  module.exports = {\n"
"    data: {\n"
"      images: [\n"
"        {imgId: 1, imgUrl: '...'},\n"
"        {imgId: 2, imgUrl: '...'},\n"
"        {imgId: 3, imgUrl: '...'},\n"
"        ...\n"
"      ]\n"
"    },\n"
"    methods: {\n"
"      getImageId: function(e) {\n"
"        // get e.target.id\n"
"      }\n"
"    }\n"
"  }\n"
"  </script>\n"
"```\n"
msgstr ""

#. type: Plain text
#: /home/dev/download/weex/doc/syntax/id.md:57
msgid ""
"Additionally, in the [composed components](./composed-component.md), we can "
"get the corresponding sub component through `this.$vm(id)` APIs."
msgstr ""
"此外，在[](./composed-component.md)组成成分，我们可以通过`this.$vm(id)`API得"
"到相应的子组件。 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/syntax/id.md:58
msgid "Next is how to [send messages between composed components](./comm.md)."
msgstr "二是如何[发送](./comm.md)组成成分之间的消息。 ???"