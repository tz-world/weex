msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"

#. type: Title #
#: /home/dev/download/weex/doc/advanced/how-it-works.md:1
#, no-wrap
msgid "How it works"
msgstr "它是如何工作的 ???"

#. type: Title ##
#: /home/dev/download/weex/doc/advanced/how-it-works.md:3
#, no-wrap
msgid "Overview"
msgstr "概述 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:6
#, no-wrap
msgid "Weex is a extendable cross-platform solution for dynamic programming and publishing projects. In the source code you can write pages or components with `<template>`, `<style>` and `<script>` tags, and then transform them into bundles for deploying. In server-side we can use these JS bundles for client request. When client get a bundle from server, it will be processed by client-side JavaScript engine and manages the native view rendering, the native API invoking and user interactions.\n"
msgstr "weex是动态规划和出版项目可扩展的跨平台解决方案。在源代码中你可以写页或组件与`<template>``, ``<style>`` and ``<script>`标签，然后变换成束的部署。在服务器端，我们可以使用这些JS捆绑客户请求。当客户端从服务器得到一束，它将通过客户端JavaScript引擎处理和管理本地视图渲染，本地API调用和用户交互。 ???\n"

#. type: Title ###
#: /home/dev/download/weex/doc/advanced/how-it-works.md:7
#, no-wrap
msgid "Whole Workflow"
msgstr "整个流程 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:20
msgid ""
"``` Weex file --------------frontend(source code)  ↓ (transform) --------- "
"frontend(build tool)  JS bundle ------------- frontend(bundle code)  ↓ "
"(deploy) ------------ server JS bundle in server --- server ↓ (compile) "
"----------- client(js-engine)  Virtual DOM tree ------ client(weex-"
"jsframework)  ↓ (render) ------------ client(render-engine)  Native view "
"----------- client(render-engine)  ```"
msgstr ""

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:22
msgid "According to the workflow above, you need:"
msgstr "根据上面的工作流程，你需要： ???"

#. type: Bullet: '* '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:26
msgid ""
"Transformer: A nodejs tool to transform the source code into the bundle code."
msgstr "变压器：一Nodejs工具变换源代码到束编码。 ???"

#. type: Bullet: '* '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:26
msgid ""
"JS Framework: A JavaScript framework runing in the client which manage Weex "
"instance. The instance which created from a JS bundle builds virtual DOM "
"tree. Also it sends/receives native calls for native view rendering, native "
"APIs and user interactions."
msgstr ""
"js框架：一个JavaScript框架运行，管理weex实例的客户端。它创建一个JS束建立虚拟"
"的DOM树的实例。它还发送/接收本地调用本地视图渲染，本地的接口和用户交互。 ???"

#. type: Bullet: '* '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:26
msgid ""
"Native Engine: There are many different ports for different platforms: iOS/"
"Android/HTML5. They have the same components design, module APIs design and "
"rendering effect. So they can work with the one and the same JS Framework "
"and JS bundles."
msgstr ""
"原生引擎：有许多不同的港口不同的平台：iOS / Android和HTML5。他们有相同的组件"
"设计，模块的设计和渲染效果。所以他们能与同一个js框架和JS束。 ???"

#. type: Title ##
#: /home/dev/download/weex/doc/advanced/how-it-works.md:27
#, no-wrap
msgid "Transformer"
msgstr "变压器 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:30
msgid ""
"The transformer transforms a source code into a bundle code. The whole work "
"could be divided into three parts:"
msgstr "变压器将一个源代码转换成一个包码。整个工作可分为三个部分： ???"

#. type: Bullet: '* '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:34
msgid ""
"Transform `<template>` into a JSON-like tree and transform data-binding "
"attribute into a function prop which return the correct data value. For "
"example: `<foo a=\"{% raw %}{{x}}{% endraw %}\" b=\"1\" />` will be "
"transformed into `{type: \"foo\", attr: {a: function () {return this.x}, b: "
"1}}`."
msgstr ""
"变换`<template>`` into a JSON-like tree and transform data-binding attribute "
"into a function prop which return the correct data value. For example: "
"``<foo a=\"{% raw %}{{x}}{% endraw %}\" b=\"1\" />`` will be transformed "
"into ``{type: \"foo\", attr: {a: function () {return this.x}, b: 1}}`。 ???"

#. type: Bullet: '* '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:34
msgid ""
"Transform `<style>` into a JSON tree. For example: `.classname {name: value;}"
"` will be transformed into `{classname: {name: value}}`."
msgstr ""
"变换`<style>`` into a JSON tree. For example: ``.classname {name: value;}`` "
"will be transformed into ``{classname: {name: value}}`。 ???"

#. type: Bullet: '* '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:34
msgid ""
"Join the two above with `<script>` content. The three parts will be joined "
"together and wrapped into a JavaScript AMD module."
msgstr ""
"加入两个以上`<script>`内容。三部分将结合在一起，包裹成一个JavaScript AMD模"
"块。 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:36
msgid "A whole example (`main.we`):"
msgstr "一个完整的案例( z598131628476z )： ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:52
#, no-wrap
msgid ""
"```\n"
"<template>\n"
"  <foo a=\"{{x}}\" b=\"1\" class=\"bar\"></foo>\n"
"</template>\n"
"<style>\n"
"  .bar {width: 200; height: 200}\n"
"</style>\n"
"<script>\n"
"  module.exports = {\n"
"    data: function () {\n"
"      return {x: 100}\n"
"    }\n"
"  }\n"
"</script>\n"
"```\n"
msgstr ""

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:54
msgid "will transformed into:"
msgstr "将转化为： ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:76
#, no-wrap
msgid ""
"```\n"
"define('@weex-component/main', function () {\n"
"  module.exports = {\n"
"    data: function () {\n"
"      return {x: 100}\n"
"    }\n"
"  }\n"
"  module.template = {\n"
"    type: \"foo\",\n"
"    attr: {\n"
"      a: function () {return this.x},\n"
"      b: 1,\n"
"      classname: ['bar']\n"
"    }\n"
"  }\n"
"  module.style = {\n"
"    bar: {width: 200, height: 200}\n"
"  }\n"
"}\n"
"bootstrap('@weex-component/main')\n"
"```\n"
msgstr ""

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:78
msgid ""
"Additionally, the transformer could also do more things: combo the bundles, "
"bootstrap with config and external data. For more information, please see "
"the syntax specs."
msgstr ""
"此外，变压器也可以做更多的事情：组合的捆绑，引导与配置和外部数据。对于更多的"
"信息，请参阅语法规格。 ???"

#. type: Title ##
#: /home/dev/download/weex/doc/advanced/how-it-works.md:79
#, no-wrap
msgid "JS Framework"
msgstr "js框架 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:82
msgid ""
"JS Framework will run in native JavaScript engine at the beginning "
"preparation phase. It has `define()` and `bootstrap()` functions for each "
"the bunlde code. Once a JS bundle requested from server, the code will be "
"executed. `define()` will register all modules first, then `bootstrap()` "
"will start compiling main component into virtual DOM and send rendering "
"calls to native."
msgstr ""
"js框架将运行在本地JavaScript引擎在开始准备阶段。它有`define()`` and "
"``bootstrap()`` functions for each the bunlde code. Once a JS bundle "
"requested from server, the code will be executed. ``define()`` will register "
"all modules first, then ``bootstrap()`将开始编制主要成分为虚拟DOM和发送绘制调"
"用本地。 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:84
msgid "There are two key methods for the bridge between JS and native:"
msgstr "有JS和本土之间的桥梁两个关键方法： ???"

#. type: Bullet: '* '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:87
msgid ""
"`callNative` sends commands from JavaScript to native. So it's called from "
"JavaScript and implemented with native code. All commands are native APIs "
"organized by modules, for example `rendering`, `networking`, `authorizing`, "
"and other client-side features like `toast` etc."
msgstr ""
" `callNative`` sends commands from JavaScript to native. So it's called from "
"JavaScript and implemented with native code. All commands are native APIs "
"organized by modules, for example ``rendering``, ``networking``, "
"``authorizing``, and other client-side features like ``toast`等 ???"

#. type: Bullet: '* '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:87
msgid ""
"`callJS` sends commands from native to JavaScript. So it's called from "
"native and implemented by JS Framework. All commands are user interactions "
"or native callbacks."
msgstr ""
" `callJS`发送命令从本地JavaScript。所以它被称为从本地和JS框架实现。所有的命令"
"都是用户交互或本机回调。 ???"

#. type: Title ##
#: /home/dev/download/weex/doc/advanced/how-it-works.md:88
#, no-wrap
msgid "Native RenderEngine"
msgstr "本地renderengine ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:91
msgid ""
"Native RenderEngine will supplies many native components and modules for "
"call."
msgstr "本地renderengine将呼叫提供许多本地组件和模块。 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:93
#, no-wrap
msgid "**Component** is an element in the screen which have a certain view and behavior. It could be configured with some attributes and style properties, and could response user interactions. There are some common components like `<div>`, `<text>`, `<image>` etc.\n"
msgstr "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *。它可以配置一些属性和样式属性，并可以响应用户交互。有一些常见的成分如`<div>``, ``<text>``, ``<image>`等 ???\n"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:95
#, no-wrap
msgid "**Module** is a set of APIs which could be called from JS Framework. Some of them also have to make async callbacks to JS Framework, for example: send HTTP request.\n"
msgstr "*模块*是一套API可以调用js框架。他们中的一些人也可以异步回调JS框架，例如：发送HTTP请求。 ???\n"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:97
msgid ""
"During a Weex instance works, Native RenderEngine receives all kinds of "
"module API calls from JS Framework. These calls will create or update "
"components for view and use client-side features like `toast`. When a user "
"interaction or module API callback happens, It will call `callJS()` from JS "
"Framework. These jobs could walk through the Weex instance lifecycle till "
"the instance is destroyed. As is shown in the architecture figure, H5 "
"RenderEngine is a special RenderEngine with almost the same functions as "
"native RenderEngines."
msgstr ""
"一个weex实例在工作过程中，本土renderengine接收各种模块API调用的js框架。这些调"
"用会创建或更新视图和使用客户端功能`toast``. When a user interaction or "
"module API callback happens, It will call ``callJS()`从JS框架组件。这些工作可"
"以通过步行weex实例生命周期直到实例被销毁。正如在建筑图所示，是一个特殊的"
"renderengine H5 renderengine几乎相同的功能作为本土renderengines。 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:98
#, no-wrap
msgid "![arch](http://gtms02.alicdn.com/tps/i2/TB1ootBMpXXXXXrXXXXwi60UVXX-596-397.png)  \n"
msgstr "![弓】(http://gtms02.alicdn.com/tps/i2/TB1ootBMpXXXXXrXXXXwi60UVXX-596-397.png)???\n"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:100
msgid "Weex Architecture"
msgstr "weex架构 ???"

#. type: Title ###
#: /home/dev/download/weex/doc/advanced/how-it-works.md:101
#, no-wrap
msgid "call native from javascript"
msgstr "从JavaScript调用本地 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:111
#, no-wrap
msgid ""
"```\n"
"[JS Framework]\n"
"↓ callNative\n"
"module APIs\n"
"  rendering -> components display\n"
"  other features\n"
"[Native RenderEngine]\n"
"```\n"
msgstr ""

#. type: Title ###
#: /home/dev/download/weex/doc/advanced/how-it-works.md:112
#, no-wrap
msgid "call javascript from native"
msgstr "从本地调用JavaScript ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:121
msgid ""
"``` [Native RenderEngine] module APIs callbacks user interactions ↓ callJS "
"[JS Framework] ```"
msgstr ""

#. type: Title ###
#: /home/dev/download/weex/doc/advanced/how-it-works.md:122
#, no-wrap
msgid "Render Flow"
msgstr "渲染流程 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:124
#, no-wrap
msgid "![render flow](http://gtms03.alicdn.com/tps/i3/TB1_SA4MXXXXXXGaXXXpZ8UVXXX-519-337.png)  \n"
msgstr "![流](http://gtms03.alicdn.com/tps/i3/TB1_SA4MXXXXXXGaXXXpZ8UVXXX-519-337.png)渲染 ???\n"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:126
msgid "Weex Render Flow"
msgstr "weex渲染流程 ???"

#. type: Bullet: '0. '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:135
msgid "Input is virtual dom."
msgstr "输入虚拟DOM。 ???"

#. type: Bullet: '0. '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:135
msgid "**Build Tree**. Parse JSON data (virtual dom) to a Render Tree (RT)."
msgstr "* *建立树。解析JSON数据(virtual dom)来渲染树(RT)。 ???"

#. type: Bullet: '0. '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:135
msgid "**Apply Style**. Attach css style to RT nodes."
msgstr "***应用样式**。附加CSS样式RT节点。 ???"

#. type: Bullet: '0. '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:135
msgid "**Create View**. Create native views for each RT node."
msgstr "**创建视图**。为每个节点创建本地视图。 ???"

#. type: Bullet: '0. '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:135
msgid "**Attach Event**. Attach events for each view."
msgstr "**附加事件**。为每个视图附加事件。 ???"

#. type: Bullet: '0. '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:135
msgid ""
"**CSS Layout**. Use [css-layout](https://github.com/facebook/css-layout) to "
"calculate the layout of each view."
msgstr ""
"* * * * CSS布局。使用CSS布局] [(https://github.com/facebook/css-layout)计算每"
"个视图的布局。 ???"

#. type: Bullet: '0. '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:135
msgid "**Update Frame**. Update layout parameters of each view."
msgstr "**更新框架。更新每个视图的布局参数。 ???"

#. type: Bullet: '0. '
#: /home/dev/download/weex/doc/advanced/how-it-works.md:135
msgid "Output is Native or H5 Views."
msgstr "输出是本土的还是H5的看法。 ???"

#. type: Plain text
#: /home/dev/download/weex/doc/advanced/how-it-works.md:136
msgid ""
"In H5 Render Flow, `CSS Layout` and `Update Frame` are implemented by "
"browser engine like webkit."
msgstr ""
"在H5渲染流程，`CSS Layout`` and ``Update Frame`浏览器引擎WebKit实现这样"
"的。 ???"